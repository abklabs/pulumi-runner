// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package runner

import (
	"context"
	"reflect"

	"github.com/abklabs/pulumi-runner/sdk/go/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type CommandDefinition struct {
	Command     string            `pulumi:"command"`
	Environment map[string]string `pulumi:"environment"`
	Payload     []FileAsset       `pulumi:"payload"`
}

// CommandDefinitionInput is an input type that accepts CommandDefinitionArgs and CommandDefinitionOutput values.
// You can construct a concrete instance of `CommandDefinitionInput` via:
//
//	CommandDefinitionArgs{...}
type CommandDefinitionInput interface {
	pulumi.Input

	ToCommandDefinitionOutput() CommandDefinitionOutput
	ToCommandDefinitionOutputWithContext(context.Context) CommandDefinitionOutput
}

type CommandDefinitionArgs struct {
	Command     pulumi.StringInput    `pulumi:"command"`
	Environment pulumi.StringMapInput `pulumi:"environment"`
	Payload     FileAssetArrayInput   `pulumi:"payload"`
}

func (CommandDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandDefinition)(nil)).Elem()
}

func (i CommandDefinitionArgs) ToCommandDefinitionOutput() CommandDefinitionOutput {
	return i.ToCommandDefinitionOutputWithContext(context.Background())
}

func (i CommandDefinitionArgs) ToCommandDefinitionOutputWithContext(ctx context.Context) CommandDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandDefinitionOutput)
}

func (i CommandDefinitionArgs) ToCommandDefinitionPtrOutput() CommandDefinitionPtrOutput {
	return i.ToCommandDefinitionPtrOutputWithContext(context.Background())
}

func (i CommandDefinitionArgs) ToCommandDefinitionPtrOutputWithContext(ctx context.Context) CommandDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandDefinitionOutput).ToCommandDefinitionPtrOutputWithContext(ctx)
}

// CommandDefinitionPtrInput is an input type that accepts CommandDefinitionArgs, CommandDefinitionPtr and CommandDefinitionPtrOutput values.
// You can construct a concrete instance of `CommandDefinitionPtrInput` via:
//
//	        CommandDefinitionArgs{...}
//
//	or:
//
//	        nil
type CommandDefinitionPtrInput interface {
	pulumi.Input

	ToCommandDefinitionPtrOutput() CommandDefinitionPtrOutput
	ToCommandDefinitionPtrOutputWithContext(context.Context) CommandDefinitionPtrOutput
}

type commandDefinitionPtrType CommandDefinitionArgs

func CommandDefinitionPtr(v *CommandDefinitionArgs) CommandDefinitionPtrInput {
	return (*commandDefinitionPtrType)(v)
}

func (*commandDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CommandDefinition)(nil)).Elem()
}

func (i *commandDefinitionPtrType) ToCommandDefinitionPtrOutput() CommandDefinitionPtrOutput {
	return i.ToCommandDefinitionPtrOutputWithContext(context.Background())
}

func (i *commandDefinitionPtrType) ToCommandDefinitionPtrOutputWithContext(ctx context.Context) CommandDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandDefinitionPtrOutput)
}

type CommandDefinitionOutput struct{ *pulumi.OutputState }

func (CommandDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandDefinition)(nil)).Elem()
}

func (o CommandDefinitionOutput) ToCommandDefinitionOutput() CommandDefinitionOutput {
	return o
}

func (o CommandDefinitionOutput) ToCommandDefinitionOutputWithContext(ctx context.Context) CommandDefinitionOutput {
	return o
}

func (o CommandDefinitionOutput) ToCommandDefinitionPtrOutput() CommandDefinitionPtrOutput {
	return o.ToCommandDefinitionPtrOutputWithContext(context.Background())
}

func (o CommandDefinitionOutput) ToCommandDefinitionPtrOutputWithContext(ctx context.Context) CommandDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CommandDefinition) *CommandDefinition {
		return &v
	}).(CommandDefinitionPtrOutput)
}

func (o CommandDefinitionOutput) Command() pulumi.StringOutput {
	return o.ApplyT(func(v CommandDefinition) string { return v.Command }).(pulumi.StringOutput)
}

func (o CommandDefinitionOutput) Environment() pulumi.StringMapOutput {
	return o.ApplyT(func(v CommandDefinition) map[string]string { return v.Environment }).(pulumi.StringMapOutput)
}

func (o CommandDefinitionOutput) Payload() FileAssetArrayOutput {
	return o.ApplyT(func(v CommandDefinition) []FileAsset { return v.Payload }).(FileAssetArrayOutput)
}

type CommandDefinitionPtrOutput struct{ *pulumi.OutputState }

func (CommandDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CommandDefinition)(nil)).Elem()
}

func (o CommandDefinitionPtrOutput) ToCommandDefinitionPtrOutput() CommandDefinitionPtrOutput {
	return o
}

func (o CommandDefinitionPtrOutput) ToCommandDefinitionPtrOutputWithContext(ctx context.Context) CommandDefinitionPtrOutput {
	return o
}

func (o CommandDefinitionPtrOutput) Elem() CommandDefinitionOutput {
	return o.ApplyT(func(v *CommandDefinition) CommandDefinition {
		if v != nil {
			return *v
		}
		var ret CommandDefinition
		return ret
	}).(CommandDefinitionOutput)
}

func (o CommandDefinitionPtrOutput) Command() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CommandDefinition) *string {
		if v == nil {
			return nil
		}
		return &v.Command
	}).(pulumi.StringPtrOutput)
}

func (o CommandDefinitionPtrOutput) Environment() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CommandDefinition) map[string]string {
		if v == nil {
			return nil
		}
		return v.Environment
	}).(pulumi.StringMapOutput)
}

func (o CommandDefinitionPtrOutput) Payload() FileAssetArrayOutput {
	return o.ApplyT(func(v *CommandDefinition) []FileAsset {
		if v == nil {
			return nil
		}
		return v.Payload
	}).(FileAssetArrayOutput)
}

type FileAsset struct {
	Contents  *string `pulumi:"contents"`
	Filename  *string `pulumi:"filename"`
	LocalPath *string `pulumi:"localPath"`
	Mode      *int    `pulumi:"mode"`
}

// FileAssetInput is an input type that accepts FileAssetArgs and FileAssetOutput values.
// You can construct a concrete instance of `FileAssetInput` via:
//
//	FileAssetArgs{...}
type FileAssetInput interface {
	pulumi.Input

	ToFileAssetOutput() FileAssetOutput
	ToFileAssetOutputWithContext(context.Context) FileAssetOutput
}

type FileAssetArgs struct {
	Contents  pulumi.StringPtrInput `pulumi:"contents"`
	Filename  pulumi.StringPtrInput `pulumi:"filename"`
	LocalPath pulumi.StringPtrInput `pulumi:"localPath"`
	Mode      pulumi.IntPtrInput    `pulumi:"mode"`
}

func (FileAssetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileAsset)(nil)).Elem()
}

func (i FileAssetArgs) ToFileAssetOutput() FileAssetOutput {
	return i.ToFileAssetOutputWithContext(context.Background())
}

func (i FileAssetArgs) ToFileAssetOutputWithContext(ctx context.Context) FileAssetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileAssetOutput)
}

// FileAssetArrayInput is an input type that accepts FileAssetArray and FileAssetArrayOutput values.
// You can construct a concrete instance of `FileAssetArrayInput` via:
//
//	FileAssetArray{ FileAssetArgs{...} }
type FileAssetArrayInput interface {
	pulumi.Input

	ToFileAssetArrayOutput() FileAssetArrayOutput
	ToFileAssetArrayOutputWithContext(context.Context) FileAssetArrayOutput
}

type FileAssetArray []FileAssetInput

func (FileAssetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FileAsset)(nil)).Elem()
}

func (i FileAssetArray) ToFileAssetArrayOutput() FileAssetArrayOutput {
	return i.ToFileAssetArrayOutputWithContext(context.Background())
}

func (i FileAssetArray) ToFileAssetArrayOutputWithContext(ctx context.Context) FileAssetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileAssetArrayOutput)
}

type FileAssetOutput struct{ *pulumi.OutputState }

func (FileAssetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileAsset)(nil)).Elem()
}

func (o FileAssetOutput) ToFileAssetOutput() FileAssetOutput {
	return o
}

func (o FileAssetOutput) ToFileAssetOutputWithContext(ctx context.Context) FileAssetOutput {
	return o
}

func (o FileAssetOutput) Contents() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileAsset) *string { return v.Contents }).(pulumi.StringPtrOutput)
}

func (o FileAssetOutput) Filename() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileAsset) *string { return v.Filename }).(pulumi.StringPtrOutput)
}

func (o FileAssetOutput) LocalPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileAsset) *string { return v.LocalPath }).(pulumi.StringPtrOutput)
}

func (o FileAssetOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FileAsset) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

type FileAssetArrayOutput struct{ *pulumi.OutputState }

func (FileAssetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FileAsset)(nil)).Elem()
}

func (o FileAssetArrayOutput) ToFileAssetArrayOutput() FileAssetArrayOutput {
	return o
}

func (o FileAssetArrayOutput) ToFileAssetArrayOutputWithContext(ctx context.Context) FileAssetArrayOutput {
	return o
}

func (o FileAssetArrayOutput) Index(i pulumi.IntInput) FileAssetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FileAsset {
		return vs[0].([]FileAsset)[vs[1].(int)]
	}).(FileAssetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CommandDefinitionInput)(nil)).Elem(), CommandDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommandDefinitionPtrInput)(nil)).Elem(), CommandDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileAssetInput)(nil)).Elem(), FileAssetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileAssetArrayInput)(nil)).Elem(), FileAssetArray{})
	pulumi.RegisterOutputType(CommandDefinitionOutput{})
	pulumi.RegisterOutputType(CommandDefinitionPtrOutput{})
	pulumi.RegisterOutputType(FileAssetOutput{})
	pulumi.RegisterOutputType(FileAssetArrayOutput{})
}
