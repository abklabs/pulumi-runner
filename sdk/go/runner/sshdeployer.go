// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package runner

import (
	"context"
	"reflect"

	"errors"
	"github.com/abklabs/pulumi-runner/sdk/go/internal"
	"github.com/abklabs/pulumi-runner/sdk/go/ssh"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SSHDeployer struct {
	pulumi.CustomResourceState

	Config      ConfigPtrOutput            `pulumi:"config"`
	Connection  ssh.ConnectionOutput       `pulumi:"connection"`
	Create      CommandDefinitionPtrOutput `pulumi:"create"`
	Delete      CommandDefinitionPtrOutput `pulumi:"delete"`
	Environment pulumi.StringMapOutput     `pulumi:"environment"`
	Payload     FileAssetArrayOutput       `pulumi:"payload"`
	Update      CommandDefinitionPtrOutput `pulumi:"update"`
}

// NewSSHDeployer registers a new resource with the given unique name, arguments, and options.
func NewSSHDeployer(ctx *pulumi.Context,
	name string, args *SSHDeployerArgs, opts ...pulumi.ResourceOption) (*SSHDeployer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Connection == nil {
		return nil, errors.New("invalid value for required argument 'Connection'")
	}
	args.Connection = args.Connection.ToConnectionOutput().ApplyT(func(v ssh.Connection) ssh.Connection { return *v.Defaults() }).(ssh.ConnectionOutput)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SSHDeployer
	err := ctx.RegisterResource("runner:runner:SSHDeployer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSSHDeployer gets an existing SSHDeployer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSSHDeployer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SSHDeployerState, opts ...pulumi.ResourceOption) (*SSHDeployer, error) {
	var resource SSHDeployer
	err := ctx.ReadResource("runner:runner:SSHDeployer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SSHDeployer resources.
type sshdeployerState struct {
}

type SSHDeployerState struct {
}

func (SSHDeployerState) ElementType() reflect.Type {
	return reflect.TypeOf((*sshdeployerState)(nil)).Elem()
}

type sshdeployerArgs struct {
	Config      *Config            `pulumi:"config"`
	Connection  ssh.Connection     `pulumi:"connection"`
	Create      *CommandDefinition `pulumi:"create"`
	Delete      *CommandDefinition `pulumi:"delete"`
	Environment map[string]string  `pulumi:"environment"`
	Payload     []FileAsset        `pulumi:"payload"`
	Update      *CommandDefinition `pulumi:"update"`
}

// The set of arguments for constructing a SSHDeployer resource.
type SSHDeployerArgs struct {
	Config      ConfigPtrInput
	Connection  ssh.ConnectionInput
	Create      CommandDefinitionPtrInput
	Delete      CommandDefinitionPtrInput
	Environment pulumi.StringMapInput
	Payload     FileAssetArrayInput
	Update      CommandDefinitionPtrInput
}

func (SSHDeployerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sshdeployerArgs)(nil)).Elem()
}

type SSHDeployerInput interface {
	pulumi.Input

	ToSSHDeployerOutput() SSHDeployerOutput
	ToSSHDeployerOutputWithContext(ctx context.Context) SSHDeployerOutput
}

func (*SSHDeployer) ElementType() reflect.Type {
	return reflect.TypeOf((**SSHDeployer)(nil)).Elem()
}

func (i *SSHDeployer) ToSSHDeployerOutput() SSHDeployerOutput {
	return i.ToSSHDeployerOutputWithContext(context.Background())
}

func (i *SSHDeployer) ToSSHDeployerOutputWithContext(ctx context.Context) SSHDeployerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSHDeployerOutput)
}

type SSHDeployerOutput struct{ *pulumi.OutputState }

func (SSHDeployerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SSHDeployer)(nil)).Elem()
}

func (o SSHDeployerOutput) ToSSHDeployerOutput() SSHDeployerOutput {
	return o
}

func (o SSHDeployerOutput) ToSSHDeployerOutputWithContext(ctx context.Context) SSHDeployerOutput {
	return o
}

func (o SSHDeployerOutput) Config() ConfigPtrOutput {
	return o.ApplyT(func(v *SSHDeployer) ConfigPtrOutput { return v.Config }).(ConfigPtrOutput)
}

func (o SSHDeployerOutput) Connection() ssh.ConnectionOutput {
	return o.ApplyT(func(v *SSHDeployer) ssh.ConnectionOutput { return v.Connection }).(ssh.ConnectionOutput)
}

func (o SSHDeployerOutput) Create() CommandDefinitionPtrOutput {
	return o.ApplyT(func(v *SSHDeployer) CommandDefinitionPtrOutput { return v.Create }).(CommandDefinitionPtrOutput)
}

func (o SSHDeployerOutput) Delete() CommandDefinitionPtrOutput {
	return o.ApplyT(func(v *SSHDeployer) CommandDefinitionPtrOutput { return v.Delete }).(CommandDefinitionPtrOutput)
}

func (o SSHDeployerOutput) Environment() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SSHDeployer) pulumi.StringMapOutput { return v.Environment }).(pulumi.StringMapOutput)
}

func (o SSHDeployerOutput) Payload() FileAssetArrayOutput {
	return o.ApplyT(func(v *SSHDeployer) FileAssetArrayOutput { return v.Payload }).(FileAssetArrayOutput)
}

func (o SSHDeployerOutput) Update() CommandDefinitionPtrOutput {
	return o.ApplyT(func(v *SSHDeployer) CommandDefinitionPtrOutput { return v.Update }).(CommandDefinitionPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SSHDeployerInput)(nil)).Elem(), &SSHDeployer{})
	pulumi.RegisterOutputType(SSHDeployerOutput{})
}
