// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ABKLabs.Runner.Runner
{
    public static class StringFile
    {
        public static Task<StringFileResult> InvokeAsync(StringFileArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<StringFileResult>("runner:runner:stringFile", args ?? new StringFileArgs(), options.WithDefaults());

        public static Output<StringFileResult> Invoke(StringFileInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<StringFileResult>("runner:runner:stringFile", args ?? new StringFileInvokeArgs(), options.WithDefaults());

        public static Output<StringFileResult> Invoke(StringFileInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<StringFileResult>("runner:runner:stringFile", args ?? new StringFileInvokeArgs(), options.WithDefaults());
    }


    public sealed class StringFileArgs : global::Pulumi.InvokeArgs
    {
        [Input("contents")]
        public string? Contents { get; set; }

        [Input("filename")]
        public string? Filename { get; set; }

        [Input("localPath")]
        public string? LocalPath { get; set; }

        [Input("mode")]
        public int? Mode { get; set; }

        public StringFileArgs()
        {
        }
        public static new StringFileArgs Empty => new StringFileArgs();
    }

    public sealed class StringFileInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("contents")]
        public Input<string>? Contents { get; set; }

        [Input("filename")]
        public Input<string>? Filename { get; set; }

        [Input("localPath")]
        public Input<string>? LocalPath { get; set; }

        [Input("mode")]
        public Input<int>? Mode { get; set; }

        public StringFileInvokeArgs()
        {
        }
        public static new StringFileInvokeArgs Empty => new StringFileInvokeArgs();
    }


    [OutputType]
    public sealed class StringFileResult
    {
        public readonly string? Contents;
        public readonly string? Filename;
        public readonly string? LocalPath;
        public readonly int? Mode;

        [OutputConstructor]
        private StringFileResult(
            string? contents,

            string? filename,

            string? localPath,

            int? mode)
        {
            Contents = contents;
            Filename = filename;
            LocalPath = localPath;
            Mode = mode;
        }
    }
}
